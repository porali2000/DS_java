public class BlackRedTree<K,V> {

	public Node root;
	public int size = 0;

	public class Node<K,V> {
		public K key;
		public V value;
		public Node<K,V> parent, left, right;
		public boolean isBlack, isLeft;

		public Node(K key, V value) {
			this.key = key;
			this.value = value;
		}

		@Override
		public String toString() {
			return "Node{" +
					"key=" + key +
					", value=" + value +
					", parent=" + parent +
					", left=" + left +
					", right=" + right +
					", isBlack=" + isBlack +
					", isLeft=" + isLeft +
					'}';
		}
	}

	public void add(K key, V value) {
		Node newNode = new Node(key, value);
		if (null == root) {
			newNode.isBlack = true;
			this.root = newNode;
			size++;
			return ;
		}
		this.add(newNode, root);
	}

	private void add(Node<K,V> newNode, Node<K,V> parent) {
		if(newNodeEqual(newNode, parent)) {
			return;
		}
		if(newNodeToRight(newNode, parent)) {
			if (parent.right == null) {
				parent.right = newNode;
				newNode.parent = parent;
				newNode.isLeft = false;
				size++;
				return;
			}
			add(parent.right, newNode);
		}

		if (parent.left == null) {
			parent.left = newNode;
			newNode.parent = parent;
			newNode.isLeft = true;
			size++;
			return;
		}
		add(parent.left, newNode);

	}

	private boolean newNodeEqual(Node<K,V> newNode, Node<K,V> parent) {
		return ((Comparable<K>)newNode.key).compareTo(parent.key) == 0;
	}

	private boolean newNodeToRight(Node<K,V> newNode, Node<K,V> parent) {
		return ((Comparable<K>)newNode.key).compareTo(parent.key) > 0;
	}

	public void print() {
		System.out.println("Size of the tree: "+ size);
		Node<K,V> current = this.root;
		while (current !=  null) {
			System.out.println(current);
			if (current.left != null) current = current.left;
			if (current.right != null) current  = current.right;
			if (current.right == null && current.left == null) current = null;
		}
	}

	public static void main(String[] args) {
		BlackRedTree<Integer, Integer> tree = new BlackRedTree();
		tree.add(3, 3);
		tree.add(4, 4);
		tree.print();
	}

}
